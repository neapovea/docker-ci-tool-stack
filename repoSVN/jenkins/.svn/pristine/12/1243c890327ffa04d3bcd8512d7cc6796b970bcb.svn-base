def GlobalConfig
pipeline {
    agent any

    post {
        success {
            mail(to:"alejandro.maillard@getronics.com",
                    subject: "[${env.ENTORNO}] Job '${env.JOB_NAME}' (${env.BUILD_NUMBER}) ejecutado",
                    body: "El Job ha finalizado: ${env.BUILD_URL}. Referencia: ${config?.REF}\n  Sonar: ${env.SONARURL}")
        }
        failure {
            mail(to:"alejandro.maillard@getronics.com",
                    subject: "[${env.ENTORNO}] Job '${env.JOB_NAME}' (${env.BUILD_NUMBER}) ejecutado con errores",
                    body: "El Job ha finalizado con errores: ${env.BUILD_URL}. Referencia: ${config?.REF}\n ")
        }
        unstable {
            mail(to:"alejandro.maillard@getronics.com",
                    subject: "[${env.ENTORNO}] Job '${env.JOB_NAME}' (${env.BUILD_NUMBER}) inestable",
                    body: "El Job ha finalizado: ${env.BUILD_URL}. Referencia: ${config?.REF}\n  Sonar: ${env.SONARURL}")
        }
    }
    options {

    }
    stages {
        stage('Validate Config') {
            steps {
                script {
                    try {
                        //Lectura del fichero de configuracion, asociado por nombre de la tarea

                        echo "Cargando fichero de configuracion del job: " + env.JOB_NAME
                        //Lectura del fichero de configuracion, asociado por nombre de la tarea
                        def config = readJSON text: libraryResource("config/" + env.JOB_NAME + ".json")
                        echo "Configuracion leida"
                        //asignacion de parametros por defecto
                        config.type = utilHelper.defaultIfNull(config.type, 'MAVEN')
                        config.mailNotification = utilHelper.defaultIfNull(config.mailNotification, '')
                        config.pipelineVersion = utilHelper.defaultIfNull(config.pipelineVersion, 99999)

                        echo "Configuracion cargada"
                    } catch (Exception e) {
                        echo e.toString()
                        throw e
                    }

                    //Comprobar que el Job contiene los parametros necesarios
                    echo "Comprobando parametros del Job"
                    def profiles = config?.stage?.build?.profiles
                    config << params
                    //Parametros para todos los tipos
                    def parametersList = [[$class: 'GitParameterDefinition', name: 'REF', repository: config.urlGit],
                                          choice(choices: 'NO\nSI', description: '', name: 'DEPLOY_BINARIES')]
                    echo "Cargando configuracion del JOB especifica para proyectos " + config.type

                    //parametros especificos de los tipos MAVEN ANT NET
                    parametersList.add(choice(choices: 'SI\nNO', description: 'Especifica si se ejecutara Sonar o no', name: 'SONAR'))
                    parametersList.add(choice(choices: 'NO\nSI', description: 'Especifica si se eliminara el WS completamente antes de empezar la tarea', name: 'CLEAN_WS'))
                    def propertiesList = [buildDiscarder(logRotator(artifactDaysToKeepStr: '20', artifactNumToKeepStr: '6', daysToKeepStr: '', numToKeepStr: '')),
                                          disableConcurrentBuilds(),
                                          parameters(parametersList),
                                          ]
                    println " "
                    println "CONFIGURACION DE LA EJECUCION: "
                    println prettyPrint(toJson(config))
                    println " "
                    properties(propertiesList)

                    //Comprobacion de parametros especificos
                    if (!config.SONAR) {
                        error "Faltan parametros, puede ser debido a una actualizacion del Job, por favor ejecute de nuevo el Job."
                    }
                    break
                    config.each { k, v -> sasHelper.setParam(k, v) }

                    try {
                        utilHelper.retry({
                            mail(to: "alejandro.maillard@getronics.com",
                                    subject: "[${env.ENTORNO}] Job '${env.JOB_NAME}' (${env.BUILD_NUMBER}) iniciado",
                                    body: "El Job se ha iniciado: ${env.BUILD_URL}.")
                        })
                    } catch (Exception e) {
                        echo e.toString()
                    }
                }
            }
        }

        stage('Checkout') {
            steps {

                utilCheckout(config)

            }
        }

        stage('Build') {
            steps {

                def mavenVersion = utilHelper.getMavenVersion(build.jdk)
                def jdkBits = ""
                if (build.jdkBits) jdkBits = "_" + build.jdkBits
                withMaven(
                        jdk: build.jdk + jdkBits,
                        maven: mavenVersion,
                        mavenOpts: utilHelper.defaultIfNull(build?.mavenOpts, defConfig.get("maven.options")),
                        options: [
                                artifactsPublisher(disabled: build.skipArtifacts),
                                findbugsPublisher(disabled: true),
                                openTasksPublisher(disabled: true)]) {
                    def filePath = utilHelper.defaultIfNull(build?.filePath, 'pom.xml')
                    
                    bat('mvn -f ' + filePath + ' -DskipTests -Dcobertura.skip -Dmaven.javadoc.skip=true clean install' )
                }

            }
        }
        stage('Testing') {
            steps {
                def jdk = utilHelper.defaultIfNull(testing?.jdk, utilHelper.defaultIfNull(build?.jdk, '1.8'))
                def mavenVersion = utilHelper.getMavenVersion(jdk)
                def filePath = utilHelper.defaultIfNull(testing?.filePath, utilHelper.defaultIfNull(build?.filePath, 'pom.xml'))

                try {
                    withMaven(
                            jdk: jdk,
                            maven: mavenVersion,
                            mavenOpts: utilHelper.defaultIfNull(testing?.mavenOpts, utilHelper.defaultIfNull(build?.mavenOpts, defConfig.get("maven.options"))),
                            options: [
                                    artifactsPublisher(disabled: true),
                                    findbugsPublisher(disabled: true),
                                    openTasksPublisher(disabled: true)]) {

                        bat('mvn -f ' + filePath + ' ' + ' org.jacoco:jacoco-maven-plugin:prepare-agent test -Dmaven.javadoc.skip=true -fae -Dmaven.test.failure.ignore=false')
                    }
                } catch (err) {
                    echo 'Testing failed!'
                    def sw = new StringWriter()
                    def pw = new PrintWriter(sw)
                    err.printStackTrace(pw)
                    echo sw.toString()
                    currentBuild.result = 'UNSTABLE'
                }
            }

        }
        stage('Code Quality') {
            when {
                expression { config.SONAR == 'SI' }
            }
            steps {

                def projectDateString = ''
                projectDate = LocalDate.now().format("yyyy-MM-dd'T'HH:mm:ss", TimeZone.getTimeZone("Europe/Madrid")) + '+0100'
                projectDateString = ' -Dsonar.projectDate=' + projectDate

                def filePath = utilHelper.defaultIfNull(build?.filePath, 'pom.xml')
                def sonarParameters = utilHelper.defaultIfNull(addparameters, [:])
                def parameters = sonarParameters.collect { /$it.key="$it.value"/ } join " "
                withSonarQubeEnv(defConfig.get("sonar.version")) {
                    withMaven(jdk: defConfig.get("sonar.jdk"),
                            maven: defConfig.get("sonar.maven"),
                            mavenOpts: utilHelper.defaultIfNull(codeQuality?.mavenOpts, utilHelper.defaultIfNull(build?.mavenOpts, defConfig.get("maven.options")))
                    ) {
                        bat('mvn -f ' + filePath + ' ' + defConfig.get("sonar.plugin") + ':sonar ' + projectDate +
                                ' -Dsonar.projectVersion=' + version +
                                ' ' + parameters)
                    }
                }
            }
        }

    }
}
