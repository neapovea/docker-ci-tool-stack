def call(config) {
    //Establece el leakPeriod indicado en el job o lo calcula segun la version actual
    def version = config.PROJECT_VERSION
    try {
        version = sasHelper.defaultIfEmpty(config.PROJECT_VERSION_POM.split("-")[0], config.PROJECT_VERSION)
    } catch (ex) {
    }
    def prevVersion = sasHelper.previousVersion(version)
    echo("Comparacion " + prevVersion + " con " + version)
    def leakPeriodFinal = sasHelper.defaultIfEmpty(config.LEAK_PERIOD, prevVersion)
    def key = config.PROJECT_NAME
    env.SONARURL = "http://" + sasConfig.get("sonar.domain") + "/sonarqube/dashboard/index/" + config.PROJECT_NAME
    def projectDateString = ''
    def projectDate = config.PROJECT_DATE
    if (projectDate == '')
        projectDate = sasGitHelper.getDateLastCommit().format("yyyy-MM-dd'T'HH:mm:ss", TimeZone.getTimeZone("Europe/Madrid")) + '+0100'
    projectDateString = ' -Dsonar.projectDate=' + projectDate
    switch (config.type) {
        case "MAVEN":
            setLeakPeriod(leakPeriodFinal, key)
            sonarMaven(config?.stage?.codeQuality, config?.stage?.build, config.PROJECT_VERSION, projectDateString, config?.stage?.codeQuality?.additionalParams)
            break
        case "ANT":
            key = "ANT_" + key
            setLeakPeriod(leakPeriodFinal, key)
            sonarAnt(key, config.PROJECT_NAME, config.PROJECT_VERSION, projectDateString, config?.stage?.codeQuality?.additionalParams)
            break
        case "NET":
            key = "NET_" + key
            sonarNet(key, config.PROJECT_NAME, config.PROJECT_VERSION)
            break
        case "ZIP":
            //No realiza nada en en esta fase
            break
        default:
            error "No se ha especificado el 'type' del proyecto, por lo que no se puede seguir con la compilacion."
            break
    }
    //establece el leakperiod en sonar a la opcion por defecto
    //setLeakPeriod('previous_version', key)
}

/**
 * Establece a traves de la api de Sonar el leakperiod de un proyecto concreto
 * @param leakPeriod
 * @param key
 * @return
 */
def setLeakPeriod(leakPeriod, key) {
    withCredentials([string(credentialsId: 'sonar_token_api', variable: 'token')]) {
        bat("curl -u " + token + ": -X POST \"http://" + sasConfig.get("sonar.domain") + "/sonarqube/api/properties?id=sonar.leak.period&value=" + leakPeriod + "&resource=" + key + "\"")
    }
}

def sonarMaven(codeQuality, build, version, projectDate, addparameters) {
    def filePath = sasHelper.defaultIfNull(build?.filePath, 'pom.xml')
    def sonarParameters = sasHelper.defaultIfNull(addparameters, [:])
    def parameters = sonarParameters.collect { /$it.key="$it.value"/ } join " "
    withSonarQubeEnv(sasConfig.get("sonar.version")) {
        withMaven(jdk: sasConfig.get("sonar.jdk"),
                maven: sasConfig.get("sonar.maven"),
                mavenOpts: sasHelper.defaultIfNull(codeQuality?.mavenOpts, sasHelper.defaultIfNull(build?.mavenOpts, sasConfig.get("maven.options")))
        ) {
            bat('mvn -f ' + filePath + ' ' + sasConfig.get("sonar.plugin") + ':sonar ' + projectDate +
                    ' -Dsonar.projectVersion=' + version +
                    ' ' + parameters)
        }
    }
}

def sonarNet(String key, String name, String version) {
    //toda la configuracion de credenciales y parametros de sonar para .Net se ubica en: "D:\Sonar.net"
    bat('D:\\Sonar.net\\MSBuild.SonarQube.Runner.exe begin /k:"' + key + '" /n:"' + name + '" /v:"' + version + '"')
    bat('"C:\\Program Files (x86)\\MSBuild\\14.0\\Bin\\MSBuild" /t:Rebuild')
    retry(3) {
        bat('D:\\Sonar.net\\MSBuild.SonarQube.Runner.exe end')
    }
}

def sonarAnt(key, name, version, projectDate, addparameters) {
    def sonarParameters = sasHelper.defaultIfNull(addparameters, [:])
    def parameters = sonarParameters.collect { /$it.key="$it.value"/ } join " "
    //echo parameters
    def scannerHome = tool 'SonarScanner'
    withSonarQubeEnv(sasConfig.get("sonar.version")) {
        bat('"' + scannerHome + '\\bin\\sonar-scanner.bat" -Dsonar.projectKey="' + key + '" -Dsonar.projectName="' + name + '" -Dsonar.projectVersion="' + version + '" ' + projectDate + ' ' + parameters)
    }

}
